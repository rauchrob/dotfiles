#!/usr/bin/env bash

set -eu

trap 'unexpected non-zero exit code in line $LINENO' ERR

DRY_RUN=false
FORCE=false
QUIET=false
DEBUG=false
TARGET_DIR=${HOME}

DOTFILE_DIR=$(cd $(dirname $0); pwd)

MKDIR=$(which mkdir)
LN=$(which ln)
RM=$(which rm)

main() {
  parse_options "$@"
  create_dotfiles_link
  install_dotfiles
}

parse_options() {
  while getopts "nfqdi:h" opt; do
    case $opt in
      n)
        debug "dry run mode enabled"
        DRY_RUN=true
        ;;
      f)
        debug "force mode enabled"
        FORCE=true
        ;;
      q)
        debug "quiet mode enabled"
        QUIET=true
        ;;
      d)
        debug "debug mode enabled"
        DEBUG=true
        ;;
      i)
        TARGET_DIR="$OPTARG"
        ;;
      h)
        print_help
        exit 0
        ;;
      *)
        print_help
        exit 2
        ;;
    esac
  done
}

print_help () {
  cat << HELP
Usage: ${0} [-nfqd] [-i TARGET_DIR]
Options:
  -d    debug mode
  -f    force mode
  -h    print this help
  -i    install to TARGET_DIR (defaults to $HOME)
  -n    dry run
  -q    quiet mode
HELP
}

create_dotfiles_link() {
  link "" .dotfiles
}

# create symbolic links in $TARGET_DIR with targets relative to $DOTFILE_DIR.
link() {
  local target="${DOTFILE_DIR}/${1}"

  case $# in
    1)
      local path="${TARGET_DIR}/.${1}"
      ;;
    2)
      local path="${TARGET_DIR}/${2}"
      ;;
  esac

  path_dir=$(dirname "$path")

  if [ -e "$path_dir" ]; then
    if ! [ -d "$path_dir" ]; then
      if $FORCE; then
        warning "$path_dir is no directory, forcing removal."
        rm -rf "$path_dir"
        mkdir -p "$path_dir"
      else
        warning "directory $path_dir exists, skipping."
        return
      fi
    fi
  else
    mkdir -p "$path_dir"
  fi

  if [ -e "$path" ]; then
    if [ -L "$path" ] && [ "$(readlink "$path")" == "$target" ]; then
      return
    fi
    
    if $FORCE; then
      rm -rf "$path"
    else
      warning "$path exists, skipping"
      return
    fi
  fi

  debug "creating symbolic link ${path} -> ${target}"
  if $FORCE; then
    ln -sf $target $path;
  else
    ln -s $target $path;
  fi
}

warning() { 
  if ! $QUIET; then 
    echo "Warning: $*" >&2
  fi
}

info() { 
  if ! $QUIET; then
    echo "Info: $*"
  fi
}

debug() { 
  if $DEBUG; then
    echo "Debug: $*" >&2
  fi
}

mkdir() { run $MKDIR "$@"; }
ln() { run $LN "$@"; }
rm() { run $RM "$@"; }

run() {
  if $DRY_RUN; then
    if ! $QUIET; then
      echo "$* (noop)"
    fi
  else
    if ! $QUIET; then
      echo $*
      "$@"
    fi
  fi
}

install_atom_config() {
  link atom/config.cson
  link atom/init.coffee
  link atom/keymap.cson
  link atom/snippets.cson
  link atom/styles.less
}

install_bash_config() {
  link bash/bashrc .bashrc
  link bash/bash_profile .bash_profile
}

install_eyaml_config() {
  link eyaml/config.yaml
  link eyaml/public_key.pkcs7.pem
}

install_git_config() {
  link git/gitconfig .gitconfig
  link git/gitignore_global .gitignore_global
  link git/gitconfig.local .gitconfig_local
}

install_gnupg_config() {
  link gnupg/gpg-agent.conf
  link gnupg/gpg.conf
  link gnupg/pubring.gpg
  link gnupg/private-keys-v1.d
  link gnupg/.gpg-v21-migrated
  link gnupg/trustdb.gpg
  run chmod -R go-rwx ~/.gnupg
}

install_mercurial_config() {
  link mercurial/hgrc .hgrc
  link mercurial/hgrc.local .hgrc.local
}

install_tmux_config() {
  link tmux/tmux.conf .tmux.conf
  link tmux/plugins
  run tmux start-server
  run tmux new-session -d
  run ~/.tmux/plugins/tpm/scripts/install_plugins.sh
  run tmux kill-server
}

install_vim_config() {
  link vim/vimrc .vimrc
  link vim/vundle .vim/bundle/Vundle.vim
  run vim +BundleInstall +qall 2&> /dev/null
}

install_zsh_config() {
  link zsh/zshrc .zshrc
  link zsh/oh-my-zsh .oh-my-zsh
}

install_dotfiles() {
  install_atom_config
  install_bash_config
  install_eyaml_config
  install_git_config
  install_gnupg_config
  install_tmux_config
  install_vim_config
  install_zsh_config
  
  # misc installation
  link inputrc
  link rvmrc
  link gemrc
}

main "$@"

exit 0
